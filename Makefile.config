# RaeenOS Build Configuration
# Central configuration for all builds across 42-agent development
# Version: 2.0

#==============================================================================
# BUILD SYSTEM CONFIGURATION
#==============================================================================

# Build system version
BUILD_SYSTEM_VERSION = 2.0

# Top-level directory
TOPDIR := $(shell pwd)

# Architecture configuration
ARCH ?= x86_64
SUPPORTED_ARCHS = x86_64 arm64

# Build type configuration
BUILD_TYPE ?= debug
SUPPORTED_BUILD_TYPES = debug release profile

# Validate architecture
ifeq ($(filter $(ARCH),$(SUPPORTED_ARCHS)),)
    $(error Unsupported architecture: $(ARCH). Supported: $(SUPPORTED_ARCHS))
endif

# Validate build type
ifeq ($(filter $(BUILD_TYPE),$(SUPPORTED_BUILD_TYPES)),)
    $(error Unsupported build type: $(BUILD_TYPE). Supported: $(SUPPORTED_BUILD_TYPES))
endif

#==============================================================================
# TOOLCHAIN CONFIGURATION
#==============================================================================

# Cross-compilation prefix
ifeq ($(ARCH),x86_64)
    CROSS_COMPILE ?= x86_64-elf-
else ifeq ($(ARCH),arm64)
    CROSS_COMPILE ?= aarch64-linux-gnu-
endif

# Tool definitions
CC = $(CROSS_COMPILE)gcc
CXX = $(CROSS_COMPILE)g++
AS = $(CROSS_COMPILE)as
LD = $(CROSS_COMPILE)ld
AR = $(CROSS_COMPILE)ar
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
STRIP = $(CROSS_COMPILE)strip
NM = $(CROSS_COMPILE)nm
NASM = nasm

# Alternative tools (fallback to system tools if cross-compiler not available)
ifeq ($(shell which $(CC) 2>/dev/null),)
    $(warning Cross-compiler $(CC) not found, falling back to system compiler)
    CC = gcc
    CXX = g++
    AS = as
    LD = ld
    AR = ar
    OBJCOPY = objcopy
    OBJDUMP = objdump
    STRIP = strip
    NM = nm
endif

#==============================================================================
# COMPILER FLAGS BY BUILD TYPE
#==============================================================================

# Debug build flags
ifeq ($(BUILD_TYPE),debug)
    CFLAGS_BUILD = -g3 -O0 -DDEBUG -DRAEENOS_DEBUG
    CXXFLAGS_BUILD = -g3 -O0 -DDEBUG -DRAEENOS_DEBUG
    ASFLAGS_BUILD = -g
    LDFLAGS_BUILD = -g
endif

# Release build flags
ifeq ($(BUILD_TYPE),release)
    CFLAGS_BUILD = -O2 -DNDEBUG -DRAEENOS_RELEASE
    CXXFLAGS_BUILD = -O2 -DNDEBUG -DRAEENOS_RELEASE
    ASFLAGS_BUILD = 
    LDFLAGS_BUILD = -s
endif

# Profile build flags
ifeq ($(BUILD_TYPE),profile)
    CFLAGS_BUILD = -g -O2 -DPROFILE -DRAEENOS_PROFILE -pg
    CXXFLAGS_BUILD = -g -O2 -DPROFILE -DRAEENOS_PROFILE -pg
    ASFLAGS_BUILD = -g
    LDFLAGS_BUILD = -pg
endif

#==============================================================================
# ARCHITECTURE-SPECIFIC FLAGS
#==============================================================================

# x86-64 specific flags
ifeq ($(ARCH),x86_64)
    CFLAGS_ARCH = -m64 -mno-red-zone -mno-mmx -mno-sse -mno-sse2 -mno-sse3 \
                  -mno-3dnow -mcmodel=kernel -fno-pic
    CXXFLAGS_ARCH = $(CFLAGS_ARCH)
    ASFLAGS_ARCH = --64
    LDFLAGS_ARCH = -m elf_x86_64
    NASMFLAGS_ARCH = -f elf64
endif

# ARM64 specific flags
ifeq ($(ARCH),arm64)
    CFLAGS_ARCH = -march=armv8-a -mcpu=cortex-a53 -mgeneral-regs-only
    CXXFLAGS_ARCH = $(CFLAGS_ARCH)
    ASFLAGS_ARCH = -march=armv8-a
    LDFLAGS_ARCH = -m aarch64linux
    NASMFLAGS_ARCH = -f elf64
endif

#==============================================================================
# COMMON COMPILER FLAGS
#==============================================================================

# C compiler flags
CFLAGS_COMMON = \
    -Wall -Wextra -Werror -Wstrict-prototypes -Wmissing-prototypes \
    -Wold-style-definition -Wmissing-declarations -Wredundant-decls \
    -Wnested-externs -Wcast-align -Wcast-qual -Wpointer-arith \
    -Wwrite-strings -Wswitch-default -Wswitch-enum -Wunreachable-code \
    -Wformat=2 -Winit-self -Wlogical-op -Wshadow -Wstrict-aliasing=2 \
    -Wfloat-equal -Wundef -std=c17 -fno-builtin -nostdlib \
    -fno-stack-protector -fno-omit-frame-pointer -fno-common \
    -ffreestanding -fno-asynchronous-unwind-tables

# C++ compiler flags
CXXFLAGS_COMMON = \
    -Wall -Wextra -Werror -Wcast-align -Wcast-qual -Wpointer-arith \
    -Wwrite-strings -Wswitch-default -Wswitch-enum -Wunreachable-code \
    -Wformat=2 -Winit-self -Wlogical-op -Wshadow -Wstrict-aliasing=2 \
    -Wfloat-equal -Wundef -std=c++17 -fno-builtin -nostdlib \
    -fno-stack-protector -fno-omit-frame-pointer -fno-common \
    -ffreestanding -fno-asynchronous-unwind-tables -fno-exceptions \
    -fno-rtti

# Assembly flags
ASFLAGS_COMMON = 

# NASM flags
NASMFLAGS_COMMON = -g

# Linker flags
LDFLAGS_COMMON = --gc-sections --warn-common --fatal-warnings

#==============================================================================
# COMBINED FLAGS
#==============================================================================

CFLAGS = $(CFLAGS_COMMON) $(CFLAGS_BUILD) $(CFLAGS_ARCH) $(CFLAGS_EXTRA)
CXXFLAGS = $(CXXFLAGS_COMMON) $(CXXFLAGS_BUILD) $(CXXFLAGS_ARCH) $(CXXFLAGS_EXTRA)
ASFLAGS = $(ASFLAGS_COMMON) $(ASFLAGS_BUILD) $(ASFLAGS_ARCH) $(ASFLAGS_EXTRA)
NASMFLAGS = $(NASMFLAGS_COMMON) $(NASMFLAGS_ARCH) $(NASMFLAGS_EXTRA)
LDFLAGS = $(LDFLAGS_COMMON) $(LDFLAGS_BUILD) $(LDFLAGS_ARCH) $(LDFLAGS_EXTRA)

#==============================================================================
# INCLUDE PATHS
#==============================================================================

# Core include paths
INCLUDES = \
    -I$(TOPDIR)/core/kernel/include \
    -I$(TOPDIR)/core/hal/include \
    -I$(TOPDIR)/core/security/include \
    -I$(TOPDIR)/system/include \
    -I$(TOPDIR)/userspace/include \
    -I$(TOPDIR)/ai/include \
    -I$(TOPDIR)/external/include

# Add includes to compiler flags
CFLAGS += $(INCLUDES)
CXXFLAGS += $(INCLUDES)

#==============================================================================
# BUILD DIRECTORIES
#==============================================================================

# Build output directories
BUILD_DIR = $(TOPDIR)/build
OBJ_DIR = $(BUILD_DIR)/obj
BIN_DIR = $(BUILD_DIR)/bin
LIB_DIR = $(BUILD_DIR)/lib
ISO_DIR = $(BUILD_DIR)/iso
INSTALL_DIR = $(BUILD_DIR)/install

# Create build directories
$(shell mkdir -p $(BUILD_DIR) $(OBJ_DIR) $(BIN_DIR) $(LIB_DIR) $(ISO_DIR) $(INSTALL_DIR))

#==============================================================================
# FEATURE FLAGS
#==============================================================================

# Available features
AVAILABLE_FEATURES = AI VIRTUALIZATION COMPATIBILITY ENTERPRISE GAMING CREATOR_TOOLS

# Default enabled features
FEATURES ?= AI VIRTUALIZATION

# Validate features
$(foreach feature,$(FEATURES),\
    $(if $(filter $(feature),$(AVAILABLE_FEATURES)),,\
        $(error Unknown feature: $(feature). Available: $(AVAILABLE_FEATURES))))

# Feature-specific flags
FEATURE_FLAGS = $(addprefix -DFEATURE_, $(FEATURES))
CFLAGS += $(FEATURE_FLAGS)
CXXFLAGS += $(FEATURE_FLAGS)

# Feature-specific includes
ifneq ($(filter AI,$(FEATURES)),)
    CFLAGS += -I$(TOPDIR)/ai/core/include
    CXXFLAGS += -I$(TOPDIR)/ai/core/include
endif

ifneq ($(filter VIRTUALIZATION,$(FEATURES)),)
    CFLAGS += -I$(TOPDIR)/virtualization/include
    CXXFLAGS += -I$(TOPDIR)/virtualization/include
endif

ifneq ($(filter COMPATIBILITY,$(FEATURES)),)
    CFLAGS += -I$(TOPDIR)/compatibility/include
    CXXFLAGS += -I$(TOPDIR)/compatibility/include
endif

ifneq ($(filter ENTERPRISE,$(FEATURES)),)
    CFLAGS += -I$(TOPDIR)/enterprise/include
    CXXFLAGS += -I$(TOPDIR)/enterprise/include
endif

#==============================================================================
# PARALLEL BUILD CONFIGURATION
#==============================================================================

# Parallel job configuration
PARALLEL_JOBS ?= $(shell nproc 2>/dev/null || echo 4)
MAKEFLAGS += -j$(PARALLEL_JOBS)

# Ensure reasonable job limits
ifeq ($(shell test $(PARALLEL_JOBS) -gt 32 && echo yes),yes)
    PARALLEL_JOBS = 32
endif

#==============================================================================
# VERSION INFORMATION
#==============================================================================

# Version components
VERSION_MAJOR = 1
VERSION_MINOR = 0
VERSION_PATCH = 0

# Git version information
VERSION_BUILD = $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
VERSION_DIRTY = $(shell git diff-index --quiet HEAD 2>/dev/null || echo "-dirty")
VERSION_BRANCH = $(shell git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")

# Combined version string
VERSION_STRING = "$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)-$(VERSION_BUILD)$(VERSION_DIRTY)"

# Version flags
VERSION_FLAGS = \
    -DRAEENOS_VERSION_MAJOR=$(VERSION_MAJOR) \
    -DRAEENOS_VERSION_MINOR=$(VERSION_MINOR) \
    -DRAEENOS_VERSION_PATCH=$(VERSION_PATCH) \
    -DRAEENOS_VERSION_STRING=$(VERSION_STRING) \
    -DRAEENOS_VERSION_BUILD=\"$(VERSION_BUILD)\" \
    -DRAEENOS_VERSION_BRANCH=\"$(VERSION_BRANCH)\"

CFLAGS += $(VERSION_FLAGS)
CXXFLAGS += $(VERSION_FLAGS)

#==============================================================================
# QUALITY ASSURANCE TOOLS
#==============================================================================

# Code formatting
CLANG_FORMAT ?= clang-format
CLANG_FORMAT_STYLE ?= file

# Static analysis
CLANG_TIDY ?= clang-tidy
CPPCHECK ?= cppcheck
SCAN_BUILD ?= scan-build

# Security scanning
FLAWFINDER ?= flawfinder
RATS ?= rats

# Coverage analysis
GCOV ?= gcov
LCOV ?= lcov
GENHTML ?= genhtml

# Performance profiling
PERF ?= perf
VALGRIND ?= valgrind

# Documentation generation
DOXYGEN ?= doxygen

#==============================================================================
# AGENT-SPECIFIC CONFIGURATION
#==============================================================================

# Agent ownership mapping for build notifications
KERNEL_AGENTS = kernel-architect privacy-security-engineer
HAL_AGENTS = hardware-compat-expert driver-integration-specialist
DRIVER_AGENTS = driver-integration-specialist gaming-layer-engineer audio-subsystem-engineer network-architect
SECURITY_AGENTS = privacy-security-engineer compliance-certification-specialist
SERVICE_AGENTS = package-manager-dev backup-recovery-engineer data-telemetry-engineer
NETWORK_AGENTS = network-architect privacy-security-engineer
DESKTOP_AGENTS = ux-wizard multitasking-maestro brand-identity-guru accessibility-champion
AI_AGENTS = ai-orchestrator shell-cli-engineer mobile-sync-integration-engineer
VM_AGENTS = virtualization-architect gaming-layer-engineer privacy-security-engineer
COMPAT_AGENTS = app-framework-engineer virtualization-architect third-party-integration-architect
ENTERPRISE_AGENTS = enterprise-deployment-specialist compliance-certification-specialist
QUALITY_AGENTS = code-quality-analyst testing-qa-automation-lead performance-optimization-analyst

#==============================================================================
# PLATFORM-SPECIFIC UTILITIES
#==============================================================================

# Platform detection
UNAME_S := $(shell uname -s 2>/dev/null || echo unknown)
UNAME_M := $(shell uname -m 2>/dev/null || echo unknown)

# Platform-specific commands
ifeq ($(UNAME_S),Linux)
    MKDIR = mkdir -p
    CP = cp
    RM = rm -f
    RMDIR = rm -rf
    FIND = find
    ECHO = echo
endif

ifeq ($(UNAME_S),Darwin)
    MKDIR = mkdir -p
    CP = cp
    RM = rm -f
    RMDIR = rm -rf
    FIND = find
    ECHO = echo
endif

ifeq ($(OS),Windows_NT)
    MKDIR = mkdir
    CP = copy /b
    RM = del /q
    RMDIR = rmdir /s /q
    FIND = find
    ECHO = echo
endif

#==============================================================================
# DEBUGGING AND DEVELOPMENT
#==============================================================================

# Debug mode configuration
ifdef DEBUG_BUILD
    CFLAGS += -DDEBUG_BUILD
    CXXFLAGS += -DDEBUG_BUILD
endif

# Verbose build output
ifdef VERBOSE
    Q =
    ECHO_CMD = @true
else
    Q = @
    ECHO_CMD = @echo
endif

# Build timing
ifdef BUILD_TIMING
    SHELL = $(shell which time) /bin/bash
endif

#==============================================================================
# SECURITY CONFIGURATION
#==============================================================================

# Security hardening flags
SECURITY_FLAGS = \
    -fstack-protector-strong \
    -D_FORTIFY_SOURCE=2 \
    -Wformat-security \
    -Werror=format-security

# Apply security flags in release builds
ifeq ($(BUILD_TYPE),release)
    CFLAGS += $(SECURITY_FLAGS)
    CXXFLAGS += $(SECURITY_FLAGS)
endif

#==============================================================================
# OPTIMIZATION CONFIGURATION
#==============================================================================

# Link-time optimization
ifdef LTO
    CFLAGS += -flto
    CXXFLAGS += -flto
    LDFLAGS += -flto
endif

# Profile-guided optimization
ifdef PGO
    CFLAGS += -fprofile-generate
    CXXFLAGS += -fprofile-generate
    LDFLAGS += -fprofile-generate
endif

#==============================================================================
# EXPORT CONFIGURATION
#==============================================================================

# Export important variables for sub-makefiles
export TOPDIR ARCH BUILD_TYPE FEATURES
export CC CXX AS LD AR OBJCOPY NM STRIP NASM
export CFLAGS CXXFLAGS ASFLAGS NASMFLAGS LDFLAGS
export BUILD_DIR OBJ_DIR BIN_DIR LIB_DIR
export VERSION_STRING VERSION_MAJOR VERSION_MINOR VERSION_PATCH
export PARALLEL_JOBS MAKEFLAGS
export Q ECHO_CMD MKDIR CP RM RMDIR

# Configuration validation
$(info RaeenOS Build Configuration v$(BUILD_SYSTEM_VERSION))
$(info Architecture: $(ARCH), Build Type: $(BUILD_TYPE), Features: $(FEATURES))
$(info Toolchain: $(CC), Parallel Jobs: $(PARALLEL_JOBS))