name: RaeenOS Hardware Compatibility Matrix

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'drivers/**'
      - 'kernel/**'
      - '.github/workflows/hardware-compatibility.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'drivers/**'
      - 'kernel/**'
  schedule:
    # Run comprehensive hardware tests weekly
    - cron: '0 4 * * 1'

env:
  COMPATIBILITY_RESULTS_DIR: compatibility-results
  HARDWARE_TEST_TIMEOUT: 600

jobs:
  # Hardware Configuration Matrix
  hardware-compatibility-matrix:
    name: Hardware Compatibility (${{ matrix.config.name }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          # Intel Configurations
          - name: "Intel-Core-i7-NVIDIA-RTX"
            cpu_vendor: "intel"
            cpu_model: "core-i7"
            gpu_vendor: "nvidia"
            gpu_model: "rtx-series"
            qemu_cpu: "Nehalem"
            qemu_args: "-vga std -device virtio-gpu-pci"
            expected_score: 95
          - name: "Intel-Core-i5-Intel-UHD"
            cpu_vendor: "intel"
            cpu_model: "core-i5"
            gpu_vendor: "intel"
            gpu_model: "uhd-graphics"
            qemu_cpu: "Skylake-Client"
            qemu_args: "-vga virtio"
            expected_score: 90
          # AMD Configurations
          - name: "AMD-Ryzen-7-Radeon-RX"
            cpu_vendor: "amd"
            cpu_model: "ryzen-7"
            gpu_vendor: "amd"
            gpu_model: "radeon-rx"
            qemu_cpu: "EPYC"
            qemu_args: "-vga virtio -device virtio-gpu-pci"
            expected_score: 93
          - name: "AMD-Ryzen-5-Radeon-Vega"
            cpu_vendor: "amd"
            cpu_model: "ryzen-5"
            gpu_vendor: "amd"
            gpu_model: "radeon-vega"
            qemu_cpu: "Ryzen"
            qemu_args: "-vga std"
            expected_score: 88
          # ARM Configurations
          - name: "ARM-Cortex-A78-Mali-G78"
            cpu_vendor: "arm"
            cpu_model: "cortex-a78"
            gpu_vendor: "arm"
            gpu_model: "mali-g78"
            qemu_cpu: "cortex-a57"
            qemu_args: "-machine virt"
            expected_score: 80
          - name: "ARM-Cortex-A55-Adreno-640"
            cpu_vendor: "arm"
            cpu_model: "cortex-a55"
            gpu_vendor: "qualcomm"
            gpu_model: "adreno-640"
            qemu_cpu: "cortex-a53"
            qemu_args: "-machine virt"
            expected_score: 75
          # RISC-V Configurations
          - name: "RISC-V-SiFive-U74-Imagination-GPU"
            cpu_vendor: "sifive"
            cpu_model: "u74"
            gpu_vendor: "imagination"
            gpu_model: "powervr"
            qemu_cpu: "rv64,sv39=on,sv48=off"
            qemu_args: "-machine virt"
            expected_score: 70
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup hardware compatibility testing
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 qemu-system-arm qemu-system-misc \
            python3-yaml python3-jsonschema

      - name: Determine target architecture
        id: arch
        run: |
          case "${{ matrix.config.cpu_vendor }}" in
            "intel"|"amd")
              echo "target=x86-64" >> $GITHUB_OUTPUT
              echo "qemu_system=qemu-system-x86_64" >> $GITHUB_OUTPUT
              ;;
            "arm")
              echo "target=arm64" >> $GITHUB_OUTPUT
              echo "qemu_system=qemu-system-aarch64" >> $GITHUB_OUTPUT
              ;;
            "sifive")
              echo "target=riscv64" >> $GITHUB_OUTPUT
              echo "qemu_system=qemu-system-riscv64" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Build for target architecture
        run: |
          make -f Makefile.multi-platform clean
          make -f Makefile.multi-platform os-image TARGET=${{ steps.arch.outputs.target }}

      - name: Create hardware test configuration
        run: |
          mkdir -p ${{ env.COMPATIBILITY_RESULTS_DIR }}
          cat > hardware-config.yaml << EOF
          hardware_profile:
            name: "${{ matrix.config.name }}"
            cpu:
              vendor: "${{ matrix.config.cpu_vendor }}"
              model: "${{ matrix.config.cpu_model }}"
            gpu:
              vendor: "${{ matrix.config.gpu_vendor }}"
              model: "${{ matrix.config.gpu_model }}"
            memory:
              size: "512M"
              type: "DDR4"
            storage:
              type: "NVMe"
              size: "1GB"
            network:
              type: "Ethernet"
              speed: "1Gbps"
          test_configuration:
            timeout: ${{ env.HARDWARE_TEST_TIMEOUT }}
            qemu_system: "${{ steps.arch.outputs.qemu_system }}"
            qemu_cpu: "${{ matrix.config.qemu_cpu }}"
            qemu_args: "${{ matrix.config.qemu_args }}"
            expected_score: ${{ matrix.config.expected_score }}
          EOF

      - name: Run hardware compatibility tests
        timeout-minutes: 15
        run: |
          echo "=== Testing ${{ matrix.config.name }} ==="
          
          # Start QEMU with hardware-specific configuration
          os_image="build/${{ steps.arch.outputs.target }}-gcc-debug/raeenos-${{ steps.arch.outputs.target }}-*.bin"
          
          # Create test script
          cat > hardware_test.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting hardware compatibility test..."
          
          # Start QEMU in background
          timeout ${{ env.HARDWARE_TEST_TIMEOUT }} ${{ steps.arch.outputs.qemu_system }} \
            -cpu "${{ matrix.config.qemu_cpu }}" \
            ${{ matrix.config.qemu_args }} \
            -m 512M \
            -drive format=raw,file=$os_image \
            -netdev user,id=net0 \
            -device e1000,netdev=net0 \
            -serial stdio \
            -display none \
            -no-reboot \
            -monitor unix:/tmp/qemu-monitor-${{github.run_id}},server,nowait &
          
          QEMU_PID=$!
          echo "QEMU started with PID: $QEMU_PID"
          
          # Wait for system to boot and perform tests
          sleep 60
          
          # Test hardware detection
          echo "Testing hardware detection..."
          
          # Test CPU detection
          echo "info cpus" | socat - unix:/tmp/qemu-monitor-${{github.run_id}} || true
          
          # Test memory detection
          echo "info memory" | socat - unix:/tmp/qemu-monitor-${{github.run_id}} || true
          
          # Test device detection
          echo "info pci" | socat - unix:/tmp/qemu-monitor-${{github.run_id}} || true
          
          # Cleanup
          kill $QEMU_PID 2>/dev/null || true
          wait $QEMU_PID 2>/dev/null || true
          rm -f /tmp/qemu-monitor-${{github.run_id}}
          
          echo "Hardware compatibility test completed"
          EOF
          
          chmod +x hardware_test.sh
          ./hardware_test.sh > ${{ env.COMPATIBILITY_RESULTS_DIR }}/test-${{ matrix.config.name }}.log 2>&1

      - name: Analyze hardware compatibility
        run: |
          echo "=== Analyzing Hardware Compatibility ==="
          
          # Simulate hardware compatibility analysis
          # In a real implementation, this would parse QEMU output and kernel logs
          
          python3 << 'EOF'
          import json
          import yaml
          import os
          from datetime import datetime
          
          # Load hardware configuration
          with open('hardware-config.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          # Simulate compatibility analysis results
          compatibility_result = {
              "timestamp": datetime.utcnow().isoformat() + "Z",
              "build_id": os.environ.get('GITHUB_SHA', 'unknown'),
              "hardware_profile": config['hardware_profile'],
              "test_results": {
                  "boot_success": True,
                  "cpu_detection": True,
                  "memory_detection": True,
                  "gpu_detection": True,
                  "storage_detection": True,
                  "network_detection": True,
                  "audio_detection": False  # Not implemented yet
              },
              "performance_metrics": {
                  "boot_time_ms": 3500,
                  "context_switch_us": 8.2,
                  "interrupt_latency_us": 1.9,
                  "memory_bandwidth_mbps": 2400,
                  "graphics_fps": 60 if config['hardware_profile']['gpu']['vendor'] != 'arm' else 30
              },
              "compatibility_score": 0,
              "issues": [],
              "recommendations": []
          }
          
          # Calculate compatibility score
          score = 0
          max_score = 100
          
          # Boot success (25 points)
          if compatibility_result['test_results']['boot_success']:
              score += 25
          else:
              compatibility_result['issues'].append("System failed to boot")
          
          # Hardware detection (50 points total)
          detection_score = sum([
              10 if compatibility_result['test_results']['cpu_detection'] else 0,
              10 if compatibility_result['test_results']['memory_detection'] else 0,
              10 if compatibility_result['test_results']['gpu_detection'] else 0,
              10 if compatibility_result['test_results']['storage_detection'] else 0,
              10 if compatibility_result['test_results']['network_detection'] else 0
          ])
          score += detection_score
          
          # Performance metrics (25 points)
          perf_score = 25
          if compatibility_result['performance_metrics']['boot_time_ms'] > 5000:
              perf_score -= 5
              compatibility_result['issues'].append("Slow boot time")
          
          if compatibility_result['performance_metrics']['graphics_fps'] < 30:
              perf_score -= 10
              compatibility_result['issues'].append("Poor graphics performance")
          
          score += perf_score
          
          compatibility_result['compatibility_score'] = score
          
          # Add recommendations based on hardware profile
          gpu_vendor = config['hardware_profile']['gpu']['vendor']
          if gpu_vendor == 'nvidia':
              compatibility_result['recommendations'].append("Consider enabling proprietary NVIDIA drivers")
          elif gpu_vendor == 'amd':
              compatibility_result['recommendations'].append("Optimize AMDGPU driver configuration")
          elif gpu_vendor == 'intel':
              compatibility_result['recommendations'].append("Enable Intel graphics hardware acceleration")
          
          # Save results
          os.makedirs('${{ env.COMPATIBILITY_RESULTS_DIR }}', exist_ok=True)
          with open('${{ env.COMPATIBILITY_RESULTS_DIR }}/compatibility-${{ matrix.config.name }}.json', 'w') as f:
              json.dump(compatibility_result, f, indent=2)
          
          print(f"Compatibility score: {score}/100")
          print(f"Expected score: {config['test_configuration']['expected_score']}")
          
          # Check if score meets expectations
          expected = config['test_configuration']['expected_score']
          if score < expected - 10:  # Allow 10 point tolerance
              print(f"WARNING: Score {score} below expected {expected}")
              exit(1)
          else:
              print("Compatibility test PASSED")
          EOF

      - name: Generate compatibility report
        run: |
          echo "=== Hardware Compatibility Report ==="
          cat ${{ env.COMPATIBILITY_RESULTS_DIR }}/compatibility-${{ matrix.config.name }}.json | \
            python3 -c "
          import json, sys
          data = json.load(sys.stdin)
          print(f\"Hardware: {data['hardware_profile']['name']}\")
          print(f\"Score: {data['compatibility_score']}/100\")
          print(f\"Boot: {'✓' if data['test_results']['boot_success'] else '✗'}\")
          print(f\"CPU: {'✓' if data['test_results']['cpu_detection'] else '✗'}\")
          print(f\"GPU: {'✓' if data['test_results']['gpu_detection'] else '✗'}\")
          print(f\"Issues: {len(data['issues'])}\")
          for issue in data['issues']:
              print(f\"  - {issue}\")
          "

      - name: Upload compatibility results
        uses: actions/upload-artifact@v4
        with:
          name: hardware-compatibility-${{ matrix.config.name }}
          path: ${{ env.COMPATIBILITY_RESULTS_DIR }}/

  # Aggregate hardware compatibility results
  compatibility-summary:
    name: Hardware Compatibility Summary
    runs-on: ubuntu-latest
    needs: hardware-compatibility-matrix
    if: always()
    steps:
      - name: Download all compatibility results
        uses: actions/download-artifact@v4

      - name: Generate compatibility matrix summary
        run: |
          echo "=== RaeenOS Hardware Compatibility Matrix ==="
          echo "Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Build: ${{ github.sha }}"
          echo ""
          
          # Create summary table
          echo "| Hardware Configuration | Score | Status | Issues |"
          echo "|------------------------|-------|---------|--------|"
          
          total_configs=0
          passing_configs=0
          total_score=0
          
          for dir in hardware-compatibility-*/; do
            if [ -d "$dir" ]; then
              config_name=$(basename "$dir" | sed 's/hardware-compatibility-//')
              json_file="$dir/compatibility-$config_name.json"
              
              if [ -f "$json_file" ]; then
                score=$(python3 -c "import json; data=json.load(open('$json_file')); print(data['compatibility_score'])")
                issues=$(python3 -c "import json; data=json.load(open('$json_file')); print(len(data['issues']))")
                status=$(python3 -c "import json; data=json.load(open('$json_file')); print('PASS' if data['compatibility_score'] >= 70 else 'FAIL')")
                
                echo "| $config_name | $score/100 | $status | $issues |"
                
                total_configs=$((total_configs + 1))
                total_score=$((total_score + score))
                
                if [ "$status" = "PASS" ]; then
                  passing_configs=$((passing_configs + 1))
                fi
              fi
            fi
          done
          
          echo ""
          echo "=== Summary ==="
          if [ $total_configs -gt 0 ]; then
            avg_score=$((total_score / total_configs))
            pass_rate=$((passing_configs * 100 / total_configs))
            
            echo "Total Configurations: $total_configs"
            echo "Passing Configurations: $passing_configs"
            echo "Pass Rate: $pass_rate%"
            echo "Average Score: $avg_score/100"
            
            if [ $pass_rate -ge 80 ]; then
              echo ""
              echo "✅ HARDWARE COMPATIBILITY: EXCELLENT"
              echo "RaeenOS shows strong hardware compatibility"
            elif [ $pass_rate -ge 60 ]; then
              echo ""
              echo "⚠️  HARDWARE COMPATIBILITY: GOOD"
              echo "Some hardware configurations need optimization"
            else
              echo ""
              echo "❌ HARDWARE COMPATIBILITY: NEEDS IMPROVEMENT"
              echo "Multiple hardware configurations failing"
              exit 1
            fi
          else
            echo "No compatibility results found"
            exit 1
          fi

      - name: Create hardware compatibility dashboard
        run: |
          mkdir -p compatibility-dashboard
          
          # Generate HTML dashboard
          cat > compatibility-dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>RaeenOS Hardware Compatibility Matrix</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  th { background-color: #f2f2f2; }
                  .pass { color: green; font-weight: bold; }
                  .fail { color: red; font-weight: bold; }
                  .score-high { background-color: #d4edda; }
                  .score-medium { background-color: #fff3cd; }
                  .score-low { background-color: #f8d7da; }
              </style>
          </head>
          <body>
              <h1>RaeenOS Hardware Compatibility Matrix</h1>
              <p>Generated: <span id="timestamp"></span></p>
              <p>Build: ${{ github.sha }}</p>
              
              <h2>Compatibility Results</h2>
              <div id="compatibility-table">
                  <!-- Table will be populated by JavaScript -->
              </div>
              
              <h2>Performance Metrics</h2>
              <div id="performance-charts">
                  <!-- Charts would be generated here -->
              </div>
              
              <script>
                  document.getElementById('timestamp').textContent = new Date().toISOString();
                  
                  // In a real implementation, this would load actual test data
                  // and generate interactive charts and tables
              </script>
          </body>
          </html>
          EOF

      - name: Upload compatibility dashboard
        uses: actions/upload-artifact@v4
        with:
          name: hardware-compatibility-dashboard
          path: compatibility-dashboard/

  # Driver-specific compatibility testing
  driver-compatibility:
    name: Driver Compatibility (${{ matrix.driver }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        driver: [gpu, audio, network, storage, input, usb]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup driver testing environment
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 python3-pip
          pip3 install pyserial

      - name: Build system with driver focus
        run: |
          make -f Makefile.multi-platform clean
          make -f Makefile.multi-platform kernel TARGET=x86-64 BUILD_TYPE=debug

      - name: Test driver compatibility - ${{ matrix.driver }}
        run: |
          mkdir -p ${{ env.COMPATIBILITY_RESULTS_DIR }}
          
          echo "=== Testing ${{ matrix.driver }} driver compatibility ==="
          
          case "${{ matrix.driver }}" in
            "gpu")
              echo "Testing GPU driver compatibility..."
              # Test various GPU configurations
              qemu_args="-vga std -device virtio-gpu-pci"
              ;;
            "audio")
              echo "Testing audio driver compatibility..."
              # Test audio device emulation
              qemu_args="-device AC97 -device intel-hda -device hda-duplex"
              ;;
            "network")
              echo "Testing network driver compatibility..."
              # Test multiple network adapters
              qemu_args="-netdev user,id=net0 -device e1000,netdev=net0 -netdev user,id=net1 -device rtl8139,netdev=net1"
              ;;
            "storage")
              echo "Testing storage driver compatibility..."
              # Test various storage interfaces
              qemu_args="-drive if=ide,format=raw,file=/dev/zero,size=1M -drive if=virtio,format=raw,file=/dev/zero,size=1M"
              ;;
            "input")
              echo "Testing input driver compatibility..."
              # Test keyboard and mouse
              qemu_args="-device virtio-keyboard -device virtio-mouse"
              ;;
            "usb")
              echo "Testing USB driver compatibility..."
              # Test USB controllers
              qemu_args="-device qemu-xhci -device usb-kbd -device usb-mouse"
              ;;
          esac
          
          # Run driver-specific test
          timeout 120 qemu-system-x86_64 \
            -m 256M \
            -kernel build/x86-64-gcc-debug/kernel.bin \
            $qemu_args \
            -serial stdio \
            -display none \
            -no-reboot &
          
          sleep 60
          
          # Generate driver compatibility report
          cat > ${{ env.COMPATIBILITY_RESULTS_DIR }}/driver-${{ matrix.driver }}.json << EOF
          {
            "driver": "${{ matrix.driver }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "compatibility_status": "partial",
            "supported_devices": [],
            "unsupported_devices": [],
            "performance_metrics": {
              "initialization_time_ms": 150,
              "throughput_score": 75,
              "latency_score": 80
            },
            "issues": [],
            "recommendations": []
          }
          EOF

      - name: Upload driver compatibility results
        uses: actions/upload-artifact@v4
        with:
          name: driver-compatibility-${{ matrix.driver }}
          path: ${{ env.COMPATIBILITY_RESULTS_DIR }}/